{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/naveena-2002/portfolio-template/blob/main/DL%20assignment\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Rtx4KODJ5hv",
        "outputId": "63656d64-792f-4121-ad98-d790a009a356"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n",
            "17464789/17464789 [==============================] - 0s 0us/step\n",
            "Epoch 1/5\n",
            "157/157 [==============================] - 119s 715ms/step - loss: 0.6403 - accuracy: 0.6242 - val_loss: 0.6273 - val_accuracy: 0.6618\n",
            "Epoch 2/5\n",
            "157/157 [==============================] - 100s 638ms/step - loss: 0.5059 - accuracy: 0.7572 - val_loss: 0.4673 - val_accuracy: 0.7892\n",
            "Epoch 3/5\n",
            "157/157 [==============================] - 96s 610ms/step - loss: 0.3673 - accuracy: 0.8444 - val_loss: 0.4030 - val_accuracy: 0.8318\n",
            "Epoch 4/5\n",
            "157/157 [==============================] - 88s 560ms/step - loss: 0.3235 - accuracy: 0.8710 - val_loss: 0.3967 - val_accuracy: 0.8388\n",
            "Epoch 5/5\n",
            "157/157 [==============================] - 92s 586ms/step - loss: 0.3552 - accuracy: 0.8482 - val_loss: 0.5324 - val_accuracy: 0.7436\n",
            "196/196 [==============================] - 8s 43ms/step - loss: 0.5175 - accuracy: 0.7532\n",
            "Test loss: 0.5174782872200012\n",
            "Test accuracy: 0.7531599998474121\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from tensorflow.keras.datasets import imdb\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Embedding, GRU, Dense,LSTM\n",
        "import keras\n",
        "from keras import layers\n",
        "from tensorflow.keras.preprocessing import sequence\n",
        "\n",
        "# Set the maximum number of words to consider in the reviews\n",
        "max_words = 5000\n",
        "\n",
        "# Load the IMDB dataset\n",
        "(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_words)\n",
        "\n",
        "# Pad the sequences to have the same length\n",
        "max_length = 500\n",
        "x_train = sequence.pad_sequences(x_train, maxlen=max_length)\n",
        "x_test = sequence.pad_sequences(x_test, maxlen=max_length)\n",
        "\n",
        "# Build the GRU-based model\n",
        "model = Sequential()\n",
        "model.add(Embedding(max_words, 100, input_length=max_length))\n",
        "model.add(layers.SimpleRNN(128))\n",
        "model.add(Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        "\n",
        "# Train the model\n",
        "batch_size = 128\n",
        "epochs = 5\n",
        "model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_split=0.2)\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "loss, accuracy = model.evaluate(x_test, y_test, batch_size=batch_size)\n",
        "print(\"Test loss:\", loss)\n",
        "print(\"Test accuracy:\", accuracy)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "history=model.fit(x_train,y_train,batch_size=batch_size,epochs=epochs)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zNAO_TfSXP_h",
        "outputId": "2f6c4526-4dda-41f9-888f-4c42c0437544"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "196/196 [==============================] - 104s 531ms/step - loss: 0.4363 - accuracy: 0.7924\n",
            "Epoch 2/5\n",
            "196/196 [==============================] - 104s 529ms/step - loss: 0.3922 - accuracy: 0.8245\n",
            "Epoch 3/5\n",
            "196/196 [==============================] - 104s 529ms/step - loss: 0.2956 - accuracy: 0.8816\n",
            "Epoch 4/5\n",
            "196/196 [==============================] - 103s 525ms/step - loss: 0.2985 - accuracy: 0.8791\n",
            "Epoch 5/5\n",
            "196/196 [==============================] - 102s 522ms/step - loss: 0.2571 - accuracy: 0.9004\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_loss1 = history.history['loss']\n",
        "train_acc1 = history.history['accuracy']\n",
        "xc1=range(len(train_acc1))"
      ],
      "metadata": {
        "id": "xFLai_rCcUmz"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aVFc3K9mzVWD",
        "outputId": "0dd71148-22af-4ccf-94f6-58e9c4988e26"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "157/157 [==============================] - 31s 176ms/step - loss: 0.5353 - accuracy: 0.7175 - val_loss: 0.3663 - val_accuracy: 0.8416\n",
            "Epoch 2/5\n",
            "157/157 [==============================] - 18s 117ms/step - loss: 0.3429 - accuracy: 0.8545 - val_loss: 0.3232 - val_accuracy: 0.8718\n",
            "Epoch 3/5\n",
            "157/157 [==============================] - 15s 97ms/step - loss: 0.2456 - accuracy: 0.9036 - val_loss: 0.3326 - val_accuracy: 0.8740\n",
            "Epoch 4/5\n",
            "157/157 [==============================] - 11s 67ms/step - loss: 0.1995 - accuracy: 0.9256 - val_loss: 0.3238 - val_accuracy: 0.8672\n",
            "Epoch 5/5\n",
            "157/157 [==============================] - 9s 54ms/step - loss: 0.1668 - accuracy: 0.9388 - val_loss: 0.3797 - val_accuracy: 0.8502\n",
            "196/196 [==============================] - 2s 12ms/step - loss: 0.4018 - accuracy: 0.8425\n",
            "Test loss: 0.4017603099346161\n",
            "Test accuracy: 0.842519998550415\n"
          ]
        }
      ],
      "source": [
        "model = Sequential()\n",
        "model.add(Embedding(max_words, 100, input_length=max_length))\n",
        "model.add(layers.GRU(128))\n",
        "model.add(Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        "\n",
        "# Train the model\n",
        "batch_size = 128\n",
        "epochs = 5\n",
        "hist=model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_split=0.2)\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "loss, accuracy = model.evaluate(x_test, y_test, batch_size=batch_size)\n",
        "print(\"Test loss:\", loss)\n",
        "print(\"Test accuracy:\", accuracy)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_loss2 = hist.history['loss']\n",
        "train_acc2 = hist.history['accuracy']\n",
        "xc2=range(len(train_acc2))"
      ],
      "metadata": {
        "id": "Ncxw7GfEdT0l"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "WPVmMxUAzgKK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "edd64295-25e4-40b3-be15-a4cb2d9a5164"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "157/157 [==============================] - 29s 174ms/step - loss: 0.5328 - accuracy: 0.7250 - val_loss: 0.4241 - val_accuracy: 0.8088\n",
            "Epoch 2/5\n",
            "157/157 [==============================] - 20s 124ms/step - loss: 0.3034 - accuracy: 0.8756 - val_loss: 0.2994 - val_accuracy: 0.8746\n",
            "Epoch 3/5\n",
            "157/157 [==============================] - 13s 84ms/step - loss: 0.2554 - accuracy: 0.9018 - val_loss: 0.3288 - val_accuracy: 0.8614\n",
            "Epoch 4/5\n",
            "157/157 [==============================] - 11s 71ms/step - loss: 0.2038 - accuracy: 0.9254 - val_loss: 0.3139 - val_accuracy: 0.8734\n",
            "Epoch 5/5\n",
            "157/157 [==============================] - 10s 61ms/step - loss: 0.1812 - accuracy: 0.9322 - val_loss: 0.3505 - val_accuracy: 0.8504\n",
            "196/196 [==============================] - 3s 13ms/step - loss: 0.3514 - accuracy: 0.8518\n",
            "Test loss: 0.35143953561782837\n",
            "Test accuracy: 0.8518400192260742\n"
          ]
        }
      ],
      "source": [
        "model = Sequential()\n",
        "model.add(Embedding(max_words, 100, input_length=max_length))\n",
        "model.add(layers.LSTM(128))\n",
        "model.add(Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        "\n",
        "# Train the model\n",
        "batch_size = 128\n",
        "epochs = 5\n",
        "h=model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_split=0.2)\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "loss, accuracy = model.evaluate(x_test, y_test, batch_size=batch_size)\n",
        "print(\"Test loss:\", loss)\n",
        "print(\"Test accuracy:\", accuracy)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_loss3 = h.history['loss']\n",
        "train_acc3 = h.history['accuracy']\n",
        "xc3=range(len(train_loss3))"
      ],
      "metadata": {
        "id": "wE-CN84vdf87"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(xc1, train_acc1)\n",
        "plt.plot(xc2, train_acc2)\n",
        "plt.plot(xc3, train_acc3)\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.legend([\"RNN\",\"GRU\",\"LSTM\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "0opK3qV0dl36",
        "outputId": "a1cc13d7-91ac-4f00-f353-bc353899c899"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7cf21d077eb0>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}